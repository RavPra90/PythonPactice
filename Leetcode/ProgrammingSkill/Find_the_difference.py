"""
You are given two strings s and t.
String t is generated by random shuffling string s and then add one more letter at a random position.
Return the letter that was added to t.

Example 1:

Input: s = "abcd", t = "abcde"
Output: "e"
Explanation: 'e' is the letter that was added.
Example 2:

Input: s = "", t = "y"
Output: "y"

"""
from collections import Counter  # For counting character frequencies

class Solution(object):
    def findTheDifference(self, s, t):
        # --- Important Concept ---
        # Using Counter to compare frequencies:
        #   - Counter(s) counts each character in s
        #   - Counter(t) counts each character in t
        # Subtracting counters gives the extra characters in t.

        # Count characters in both strings
        count_s = Counter(s)
        count_t = Counter(t)

        # Find the difference: characters more frequent in t than in s
        diff_counter = count_t - count_s

        # There should be exactly one key for this problem
        # Extract and return it
        extra_char = list(diff_counter.keys())[0]
        return extra_char

    def findDifferences(self, s, t):
        """
        Find all character count differences between two strings of any length.

        :param s: First string (e.g., "aabc")
        :param t: Second string (e.g., "abccde")
        :return: A tuple of two lists:
                 - Characters that appear more times in s than in t.
                 - Characters that appear more times in t than in s.
        :rtype: (list, list)
        """
        # Count frequencies of each character in both strings
        count_s = Counter(s)
        count_t = Counter(t)

        # Subtract to find leftovers in each direction
        s_extras = count_s - count_t  # chars more in s
        t_extras = count_t - count_s  # chars more in t

        # Expand each Counter into a list of characters, repeated by their excess count
        only_in_s = []
        for ch, freq in s_extras.items():
            # If 'a' appears 2 more times in s than in t, we add ['a', 'a']
            only_in_s.extend([ch] * freq)

        only_in_t = []
        for ch, freq in t_extras.items():
            only_in_t.extend([ch] * freq)

        return only_in_s, only_in_t

# --- Example usage with detailed outputs ---
if __name__ == "__main__":
    sol = Solution()

    # Example 1: Single extra character in t
    s1, t1 = "abcd", "abcde"
    # Counter(t1) - Counter(s1) -> {'e': 1}
    print("Extra character:", sol.findTheDifference(s1, t1))  # Expected: 'e'

    # Example 2: s is empty, t has one character
    # Counter("") = {}, Counter("y") = {'y':1}
    print("Extra character:", sol.findTheDifference("", "y"))  # Expected: 'y'

    # Example 3: Multiple differences, s shorter than t
    s2, t2 = "aabc", "abccde"
    # count_s = {'a':2,'b':1,'c':1}
    # count_t = {'a':1,'b':1,'c':2,'d':1,'e':1}
    # s has one extra 'a'; t has extras 'c','d','e'
    only_s, only_t = sol.findDifferences(s2, t2)
    print("Chars more in s:", only_s)  # ['a']
    print("Chars more in t:", only_t)  # ['c','d','e']

    # Example 4: s longer than t
    s3, t3 = "xyzx", "xyz"
    # s_extras -> {'x':1}, t_extras -> {}
    only_s, only_t = sol.findDifferences(s3, t3)
    print("Chars more in s:", only_s)  # ['x']
    print("Chars more in t:", only_t)  # []

# --- Summary for Future Learning ---
# 1. collections.Counter: easy frequency counting with built-in subtraction.
# 2. Counter(a) - Counter(b) yields items in a that exceed counts in b.
# 3. Lists and Counter work well for finding single or multiple differences.
# 4. This approach avoids manual loops and extra memory allocations beyond the counters.
